// Code generated by mockery v2.9.4. DO NOT EDIT.

package http

import (
	context "context"

	models "github.com/onflow/flow-go/engine/access/rest/models"
	mock "github.com/stretchr/testify/mock"
)

// mockHandler is an autogenerated mock type for the handler type
type mockHandler struct {
	mock.Mock
}

// executeScriptAtBlockHeight provides a mock function with given fields: ctx, height, script, arguments
func (_m *mockHandler) executeScriptAtBlockHeight(ctx context.Context, height string, script string, arguments []string) (string, error) {
	ret := _m.Called(ctx, height, script, arguments)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) string); ok {
		r0 = rf(ctx, height, script, arguments)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, height, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// executeScriptAtBlockID provides a mock function with given fields: ctx, ID, script, arguments
func (_m *mockHandler) executeScriptAtBlockID(ctx context.Context, ID string, script string, arguments []string) (string, error) {
	ret := _m.Called(ctx, ID, script, arguments)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []string) string); ok {
		r0 = rf(ctx, ID, script, arguments)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, []string) error); ok {
		r1 = rf(ctx, ID, script, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getAccount provides a mock function with given fields: ctx, address, height
func (_m *mockHandler) getAccount(ctx context.Context, address string, height string) (*models.Account, error) {
	ret := _m.Called(ctx, address, height)

	var r0 *models.Account
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.Account); ok {
		r0 = rf(ctx, address, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, address, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getBlockByHeight provides a mock function with given fields: ctx, height
func (_m *mockHandler) getBlocksByHeights(ctx context.Context, height string) ([]*models.Block, error) {
	ret := _m.Called(ctx, height)

	var r0 []*models.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.Block); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getBlockByID provides a mock function with given fields: ctx, ID
func (_m *mockHandler) getBlockByID(ctx context.Context, ID string) (*models.Block, error) {
	ret := _m.Called(ctx, ID)

	var r0 *models.Block
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Block); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getCollection provides a mock function with given fields: ctx, ID
func (_m *mockHandler) getCollection(ctx context.Context, ID string) (*models.Collection, error) {
	ret := _m.Called(ctx, ID)

	var r0 *models.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Collection); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getEvents provides a mock function with given fields: ctx, eventType, start, end, blockIDs
func (_m *mockHandler) getEvents(ctx context.Context, eventType string, start string, end string, blockIDs []string) ([]models.BlockEvents, error) {
	ret := _m.Called(ctx, eventType, start, end, blockIDs)

	var r0 []models.BlockEvents
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []string) []models.BlockEvents); ok {
		r0 = rf(ctx, eventType, start, end, blockIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BlockEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, []string) error); ok {
		r1 = rf(ctx, eventType, start, end, blockIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getTransaction provides a mock function with given fields: ctx, ID, includeResult
func (_m *mockHandler) getTransaction(ctx context.Context, ID string, includeResult bool) (*models.Transaction, error) {
	ret := _m.Called(ctx, ID, includeResult)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) *models.Transaction); ok {
		r0 = rf(ctx, ID, includeResult)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, ID, includeResult)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// sendTransaction provides a mock function with given fields: ctx, transaction
func (_m *mockHandler) sendTransaction(ctx context.Context, transaction []byte) error {
	ret := _m.Called(ctx, transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
